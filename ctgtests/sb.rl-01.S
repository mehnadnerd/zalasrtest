
// -----------
// This file was generated by riscv_ctg (https://github.com/riscv-software-src/riscv-ctg)
// version   : 0.12.2
// timestamp : Thu May 15 07:39:12 2025 GMT
// usage     : riscv_ctg \
//                  -- cgf //                  --cgf /Users/brs/Documents/research/riscv-arch-test/coverage/dataset.cgf \
//                  --cgf /Users/brs/Documents/research/riscv-arch-test/coverage/zalasr/rv32zalasr.cgf \
 \
//                  -- xlen 32  \
//                  --randomize \
// -----------
//
// -----------
// Copyright (c) 2020. RISC-V International. All rights reserved.
// SPDX-License-Identifier: BSD-3-Clause
// -----------
//
// This assembly file tests the sb.rl instruction of the RISC-V RV32_Zalasr extension for the sb.rl covergroup.
// 
#include "model_test.h"
#include "arch_test.h"
RVTEST_ISA("RV32I_Zalasr")

.section .text.init
.globl rvtest_entry_point
rvtest_entry_point:
RVMODEL_BOOT
RVTEST_CODE_BEGIN

#ifdef TEST_CASE_1

RVTEST_CASE(0,"//check ISA:=regex(.*Zalasr.*);def TEST_CASE_1=True;",sb.rl)

RVTEST_SIGBASE(x5,signature_x5_1)

inst_0:// rs1 == rs2, rs1==x9, rs2==x9, ea_align == 3, 
// opcode: sb.rl; op1:x9; op2:x9; op2val:-0x80000000; align:3
TEST_STORE(x5,x15,0,x9,x9,-0x80000000,0,0*XLEN/8,sb.rl,3)

inst_1:// rs1 != rs2, rs1==x24, rs2==x7, ea_align == 2, 
// opcode: sb.rl; op1:x24; op2:x7; op2val:-0x80000000; align:2
TEST_STORE(x5,x15,0,x24,x7,-0x80000000,0,1*XLEN/8,sb.rl,2)

inst_2:// rs1==x17, rs2==x2, ea_align == 1, 
// opcode: sb.rl; op1:x17; op2:x2; op2val:-0x80000000; align:1
TEST_STORE(x5,x15,0,x17,x2,-0x80000000,0,2*XLEN/8,sb.rl,1)

inst_3:// rs1==x20, rs2==x19, ea_align == 0, 
// opcode: sb.rl; op1:x20; op2:x19; op2val:-0x80000000; align:0
TEST_STORE(x5,x15,0,x20,x19,-0x80000000,0,3*XLEN/8,sb.rl,0)

inst_4:// rs1==x2, rs2==x27, 
// opcode: sb.rl; op1:x2; op2:x27; op2val:-0x80000000; align:0
TEST_STORE(x5,x15,0,x2,x27,-0x80000000,0,4*XLEN/8,sb.rl,0)

inst_5:// rs1==x23, rs2==x16, 
// opcode: sb.rl; op1:x23; op2:x16; op2val:-0x80000000; align:0
TEST_STORE(x5,x15,0,x23,x16,-0x80000000,0,5*XLEN/8,sb.rl,0)

inst_6:// rs1==x26, rs2==x3, 
// opcode: sb.rl; op1:x26; op2:x3; op2val:-0x80000000; align:0
TEST_STORE(x5,x15,0,x26,x3,-0x80000000,0,6*XLEN/8,sb.rl,0)

inst_7:// rs1==x11, rs2==x18, 
// opcode: sb.rl; op1:x11; op2:x18; op2val:-0x80000000; align:0
TEST_STORE(x5,x15,0,x11,x18,-0x80000000,0,7*XLEN/8,sb.rl,0)

inst_8:// rs1==x3, rs2==x8, 
// opcode: sb.rl; op1:x3; op2:x8; op2val:-0x80000000; align:0
TEST_STORE(x5,x15,0,x3,x8,-0x80000000,0,8*XLEN/8,sb.rl,0)

inst_9:// rs1==x8, rs2==x1, 
// opcode: sb.rl; op1:x8; op2:x1; op2val:-0x80000000; align:0
TEST_STORE(x5,x15,0,x8,x1,-0x80000000,0,9*XLEN/8,sb.rl,0)

inst_10:// rs1==x10, rs2==x26, 
// opcode: sb.rl; op1:x10; op2:x26; op2val:-0x80000000; align:0
TEST_STORE(x5,x15,0,x10,x26,-0x80000000,0,10*XLEN/8,sb.rl,0)

inst_11:// rs1==x21, rs2==x31, 
// opcode: sb.rl; op1:x21; op2:x31; op2val:-0x80000000; align:0
TEST_STORE(x5,x15,0,x21,x31,-0x80000000,0,11*XLEN/8,sb.rl,0)

inst_12:// rs1==x13, rs2==x17, 
// opcode: sb.rl; op1:x13; op2:x17; op2val:-0x80000000; align:0
TEST_STORE(x5,x15,0,x13,x17,-0x80000000,0,12*XLEN/8,sb.rl,0)

inst_13:// rs1==x31, rs2==x4, 
// opcode: sb.rl; op1:x31; op2:x4; op2val:-0x80000000; align:0
TEST_STORE(x5,x15,0,x31,x4,-0x80000000,0,13*XLEN/8,sb.rl,0)

inst_14:// rs1==x6, rs2==x11, 
// opcode: sb.rl; op1:x6; op2:x11; op2val:-0x80000000; align:0
TEST_STORE(x5,x15,0,x6,x11,-0x80000000,0,14*XLEN/8,sb.rl,0)

inst_15:// rs1==x1, rs2==x6, 
// opcode: sb.rl; op1:x1; op2:x6; op2val:-0x80000000; align:0
TEST_STORE(x5,x15,0,x1,x6,-0x80000000,0,15*XLEN/8,sb.rl,0)

inst_16:// rs1==x16, rs2==x12, 
// opcode: sb.rl; op1:x16; op2:x12; op2val:-0x80000000; align:0
TEST_STORE(x5,x15,0,x16,x12,-0x80000000,0,16*XLEN/8,sb.rl,0)

inst_17:// rs1==x19, rs2==x22, 
// opcode: sb.rl; op1:x19; op2:x22; op2val:-0x80000000; align:0
TEST_STORE(x5,x15,0,x19,x22,-0x80000000,0,17*XLEN/8,sb.rl,0)

inst_18:// rs1==x25, rs2==x24, 
// opcode: sb.rl; op1:x25; op2:x24; op2val:-0x80000000; align:0
TEST_STORE(x5,x15,0,x25,x24,-0x80000000,0,18*XLEN/8,sb.rl,0)

inst_19:// rs1==x14, rs2==x30, 
// opcode: sb.rl; op1:x14; op2:x30; op2val:-0x80000000; align:0
TEST_STORE(x5,x15,0,x14,x30,-0x80000000,0,19*XLEN/8,sb.rl,0)
RVTEST_SIGBASE(x1,signature_x1_0)

inst_20:// rs1==x7, rs2==x23, 
// opcode: sb.rl; op1:x7; op2:x23; op2val:-0x80000000; align:0
TEST_STORE(x1,x2,0,x7,x23,-0x80000000,0,0*XLEN/8,sb.rl,0)

inst_21:// rs1==x5, rs2==x14, 
// opcode: sb.rl; op1:x5; op2:x14; op2val:-0x80000000; align:0
TEST_STORE(x1,x2,0,x5,x14,-0x80000000,0,1*XLEN/8,sb.rl,0)

inst_22:// rs1==x28, rs2==x25, 
// opcode: sb.rl; op1:x28; op2:x25; op2val:-0x80000000; align:0
TEST_STORE(x1,x2,0,x28,x25,-0x80000000,0,2*XLEN/8,sb.rl,0)

inst_23:// rs1==x22, rs2==x28, 
// opcode: sb.rl; op1:x22; op2:x28; op2val:-0x80000000; align:0
TEST_STORE(x1,x2,0,x22,x28,-0x80000000,0,3*XLEN/8,sb.rl,0)

inst_24:// rs1==x27, rs2==x5, 
// opcode: sb.rl; op1:x27; op2:x5; op2val:-0x80000000; align:0
TEST_STORE(x1,x2,0,x27,x5,-0x80000000,0,4*XLEN/8,sb.rl,0)

inst_25:// rs1==x18, rs2==x29, 
// opcode: sb.rl; op1:x18; op2:x29; op2val:-0x80000000; align:0
TEST_STORE(x1,x2,0,x18,x29,-0x80000000,0,5*XLEN/8,sb.rl,0)

inst_26:// rs1==x12, rs2==x15, 
// opcode: sb.rl; op1:x12; op2:x15; op2val:-0x80000000; align:0
TEST_STORE(x1,x2,0,x12,x15,-0x80000000,0,6*XLEN/8,sb.rl,0)

inst_27:// rs1==x15, rs2==x0, 
// opcode: sb.rl; op1:x15; op2:x0; op2val:0x0; align:0
TEST_STORE(x1,x2,0,x15,x0,0x0,0,7*XLEN/8,sb.rl,0)

inst_28:// rs1==x29, rs2==x21, 
// opcode: sb.rl; op1:x29; op2:x21; op2val:-0x80000000; align:0
TEST_STORE(x1,x2,0,x29,x21,-0x80000000,0,8*XLEN/8,sb.rl,0)

inst_29:// rs1==x30, rs2==x10, 
// opcode: sb.rl; op1:x30; op2:x10; op2val:-0x80000000; align:0
TEST_STORE(x1,x2,0,x30,x10,-0x80000000,0,9*XLEN/8,sb.rl,0)

inst_30:// rs1==x4, rs2==x13, 
// opcode: sb.rl; op1:x4; op2:x13; op2val:-0x80000000; align:0
TEST_STORE(x1,x2,0,x4,x13,-0x80000000,0,10*XLEN/8,sb.rl,0)

inst_31:// rs2==x20, 
// opcode: sb.rl; op1:x24; op2:x20; op2val:-0x80000000; align:0
TEST_STORE(x1,x2,0,x24,x20,-0x80000000,0,11*XLEN/8,sb.rl,0)

inst_32:// ea_align == 3, 
// opcode: sb.rl; op1:x31; op2:x30; op2val:-0x80000000; align:3
TEST_STORE(x1,x2,0,x31,x30,-0x80000000,0,12*XLEN/8,sb.rl,3)
#endif


RVTEST_CODE_END
RVMODEL_HALT

RVTEST_DATA_BEGIN
.align 4
rvtest_data:
.word 0xbabecafe
.word 0xabecafeb
.word 0xbecafeba
.word 0xecafebab
RVTEST_DATA_END

RVMODEL_DATA_BEGIN
rvtest_sig_begin:
sig_begin_canary:
CANARY;



signature_x5_0:
    .fill 0*((XLEN/8)/4),4,0xdeadbeef


signature_x5_1:
    .fill 20*((XLEN/8)/4),4,0xdeadbeef


signature_x1_0:
    .fill 13*((XLEN/8)/4),4,0xdeadbeef

#ifdef rvtest_mtrap_routine
tsig_begin_canary:
CANARY;

mtrap_sigptr:
    .fill 64*XLEN/32,4,0xdeadbeef

tsig_end_canary:
CANARY;
#endif

#ifdef rvtest_gpr_save

gpr_save:
    .fill 32*XLEN/32,4,0xdeadbeef

#endif


sig_end_canary:
CANARY;
rvtest_sig_end:
RVMODEL_DATA_END
